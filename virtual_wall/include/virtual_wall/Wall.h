// Generated by gencpp from file virtual_wall/Wall.msg
// DO NOT EDIT!


#ifndef VIRTUAL_WALL_MESSAGE_WALL_H
#define VIRTUAL_WALL_MESSAGE_WALL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>

namespace virtual_wall
{
template <class ContainerAllocator>
struct Wall_
{
  typedef Wall_<ContainerAllocator> Type;

  Wall_()
    : id(0)
    , name()
    , polygon()  {
    }
  Wall_(const ContainerAllocator& _alloc)
    : id(0)
    , name(_alloc)
    , polygon(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _polygon_type;
  _polygon_type polygon;





  typedef boost::shared_ptr< ::virtual_wall::Wall_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::virtual_wall::Wall_<ContainerAllocator> const> ConstPtr;

}; // struct Wall_

typedef ::virtual_wall::Wall_<std::allocator<void> > Wall;

typedef boost::shared_ptr< ::virtual_wall::Wall > WallPtr;
typedef boost::shared_ptr< ::virtual_wall::Wall const> WallConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::virtual_wall::Wall_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::virtual_wall::Wall_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::virtual_wall::Wall_<ContainerAllocator1> & lhs, const ::virtual_wall::Wall_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.name == rhs.name &&
    lhs.polygon == rhs.polygon;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::virtual_wall::Wall_<ContainerAllocator1> & lhs, const ::virtual_wall::Wall_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace virtual_wall

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::virtual_wall::Wall_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::virtual_wall::Wall_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::virtual_wall::Wall_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::virtual_wall::Wall_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::virtual_wall::Wall_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::virtual_wall::Wall_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::virtual_wall::Wall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4636dccb05dabeb179bb12a55a86b5c4";
  }

  static const char* value(const ::virtual_wall::Wall_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4636dccb05dabeb1ULL;
  static const uint64_t static_value2 = 0x79bb12a55a86b5c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::virtual_wall::Wall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "virtual_wall/Wall";
  }

  static const char* value(const ::virtual_wall::Wall_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::virtual_wall::Wall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 id\n"
"string name\n"
"geometry_msgs/Polygon polygon\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::virtual_wall::Wall_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::virtual_wall::Wall_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.polygon);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Wall_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::virtual_wall::Wall_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::virtual_wall::Wall_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "polygon: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.polygon);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VIRTUAL_WALL_MESSAGE_WALL_H
